# In[1]:


import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
import seaborn as sn
from sklearn.cluster import KMeans
import scipy.cluster.hierarchy as sch
from sklearn.cluster import AgglomerativeClustering


# In[2]:


data=pd.read_excel('EastWestAirlines.xlsx',sheet_name='data')
data.head()


# In[3]:


data.info()


# In[4]:


data.shape


# In[5]:


air=data.drop(['ID#','Award?'], axis=1)
air


# ####Normalization 

# In[6]:


def norm_func(i):
  x = (i-i.min())/(i.max()-i.min())
  return (x)


# In[7]:


df_norm = norm_func(air.iloc[:,:])
df_norm 


# #KMEANS Clustering

# In[8]:


fig = plt.figure(figsize=(10, 8))
WCSS = []
for i in range(1, 11):
    clf = KMeans(n_clusters=i)
    clf.fit(df_norm)
    WCSS.append(clf.inertia_) # inertia is another name for WCSS
plt.plot(range(1, 11), WCSS)
plt.title('The Elbow Method')
plt.ylabel('WCSS')
plt.xlabel('Number of Clusters')
plt.show()  


# In[9]:


WCSS


# In[10]:


clf = KMeans(n_clusters=4)
y_kmeans = clf.fit_predict(df_norm)  


# In[11]:


y_kmeans


# In[12]:


clf.cluster_centers_ 


# In[13]:


clf.inertia_


# In[14]:


md=pd.Series(y_kmeans)  # converting numpy array into pandas series object 
air['clust']=md # creating a  new column and assigning it to new column 
air


# In[15]:


air.groupby(air.clust).mean() 


# In[16]:


plt.figure(figsize=(15,8))
sn.scatterplot(air['clust'],data['ID#'],c=clf.labels_,s=300,marker='*')
plt.show();


# #DBSCAN Clustering

# In[17]:


from sklearn.cluster import DBSCAN
from sklearn.preprocessing import StandardScaler


# In[18]:


air


# In[19]:


array=air.values
array


# In[20]:


stscaler = StandardScaler().fit(array)
X = stscaler.transform(array) 
X  


# In[21]:


dbscan = DBSCAN(eps=0.70, min_samples=10)
dbscan.fit(X)


# In[22]:


dbscan.labels_ 


# In[23]:


c=pd.DataFrame(dbscan.labels_,columns=['cluster'])  


# In[24]:


c


# In[25]:


df = pd.concat([data,c],axis=1)  
df   


# In[26]:


d1=dbscan.labels_
d1


# In[27]:


import sklearn
sklearn.metrics.silhouette_score(X, d1)


# In[28]:


from sklearn.cluster import KMeans
clf = KMeans(n_clusters=5)
y_kmeans = clf.fit_predict(X)


# In[29]:


y_kmeans


# In[30]:


cl1=pd.DataFrame(y_kmeans,columns=['Kcluster']) 
cl1


# In[31]:


df1 = pd.concat([df,cl1],axis=1) 
df1 


# silhouette_score

# In[32]:


sklearn.metrics.silhouette_score(X, y_kmeans)


# DBSCAN Visualization

# In[33]:


df.plot(x="ID#",y ="cluster",c=dbscan.labels_ ,kind="scatter",s=50 ,cmap=plt.cm.copper_r) 
plt.title('Clusters using DBScan')
plt.xlabel("ID#")
plt.ylabel("cluster")


# In[34]:


df1.plot(x="ID#",y ="Kcluster",c=y_kmeans ,kind="scatter",s=50 ,cmap=plt.cm.copper_r) 
plt.title('Clusters using KMeans') 


# In[35]:


plt.figure(figsize=(20,10))
sn.scatterplot(df1['Kcluster'],df1['ID#'],c=clf.labels_,s=400,marker='*')
plt.show();


# # HIERARCHAICAL Clustering

# In[36]:


data


# In[37]:


air=data.drop(['ID#','Award?'],axis=1)


# In[38]:


air


# In[39]:


from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
air_subset = pd.DataFrame(scaler.fit_transform(air.iloc[:,1:7]))
air_subset


# Dendrogrom

# In[ ]:


from scipy.cluster.hierarchy import linkage 
import scipy.cluster.hierarchy as sch # for creating dendrogram 
p = np.array(df_norm) # converting into numpy array format 
z = linkage(df_norm, method="single",metric="euclidean")
plt.figure(figsize=(15, 5))
plt.title('Hierarchical Clustering Dendrogram')
plt.xlabel('Index')
plt.ylabel('Distance')
sch.dendrogram(
    z,
    #leaf_rotation=6.,  # rotates the x axis labels
    #leaf_font_size=15.,  # font size for the x axis labels
)
plt.show()  


# In[ ]:


p = np.array(df_norm) 
z = linkage(df_norm, method="complete",metric="euclidean")
plt.figure(figsize=(15, 5))
plt.title('Hierarchical Clustering Dendrogram')
plt.xlabel('Index')
plt.ylabel('Distance')
sch.dendrogram(
    z,
)
plt.show()    


# In[ ]:


p = np.array(df_norm) 
z = linkage(df_norm, method="average",metric="euclidean")
plt.figure(figsize=(15, 5))
plt.title('Hierarchical Clustering Dendrogram')
plt.xlabel('Index')
plt.ylabel('Distance')
sch.dendrogram(
    z,
    
)
plt.show()    


# In[ ]:


from sklearn.cluster import AgglomerativeClustering 
h_complete = AgglomerativeClustering(n_clusters=5, linkage='complete',affinity = "euclidean").fit(df_norm) 

cluster_labels=pd.Series(h_complete.labels_)
cluster_labels
air['clust']=cluster_labels   
air


# In[ ]:


air.iloc[:,1:].groupby(air.clust).mean()


# In[ ]:


data = air[(air.clust==0)]
data  


# In[ ]:


data = air[(air.clust==1)]
data  


# In[ ]:


data = air[(air.clust==2)]
data  


# In[ ]:


data = air[(air.clust==3)]
data  


# In[ ]:


data = air[(air.clust==4)]
data  


# #Inference
# 

# In Hierarichical clustering, complete method is suitable to form cluster for EastWestairlines.